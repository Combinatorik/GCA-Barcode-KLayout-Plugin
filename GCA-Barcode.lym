<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Generate barcode for GCA optical stepper</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># importing libraries 
from pya import *
import sys 

# Create GUI class
class Dialog(pya.QDialog): 

  # Dialog constructor 
  def __init__(self, parent = None): 
      pya.QDialog.__init__(self)

      # setting window title 
      self.setWindowTitle("GCA Barcode Generator") 

      # setting geometry to the window 
      self.setGeometry(300, 300, 300, 300) 

      # creating a group box 
      self.nameLabel = QLabel('Mask Name (1-10 characters):')
      self.dirLabel = QLabel('Mask save location:')
      self.alignLabel = QLabel('Barcode alignment type:')
      self.layerLabel = QLabel('Layer number:')
      self.cellLabel = QLabel('Cell name:')
      self.formGroupBox = QGroupBox("Barcode Parameters") 
      vb = pya.QVBoxLayout(self.formGroupBox)

      # creating a line edit 
      vb.addWidget(self.nameLabel)
      self.nameLineEdit = QLineEdit("*test1", self.formGroupBox)
      vb.addWidget(self.nameLineEdit)
      self.scaleLineEdit = QCheckBox("&amp;Scale 5x", self.formGroupBox)    
      vb.addWidget(self.scaleLineEdit)
      self.transLineEdit = QCheckBox("&amp;Position in reticle", self.formGroupBox) 
      vb.addWidget(self.transLineEdit)
      
      vb.addWidget(self.alignLabel)
      self.standardAlignRadio = QRadioButton("S&amp;tandard", self)
      vb.addWidget(self.standardAlignRadio)
      self.offsetAlignRadio = QRadioButton("&amp;Offset", self)
      vb.addWidget(self.offsetAlignRadio)
            
      vb.addWidget(self.cellLabel)
      self.cellName = QLineEdit("BARCODE", self.formGroupBox)
      vb.addWidget(self.cellName)
      vb.addWidget(self.layerLabel)
      self.layerNum = QLineEdit("1", self.formGroupBox)
      vb.addWidget(self.layerNum)
      
      self.embedCheckbox = QCheckBox("&amp;Embed barcode in current layout", self.formGroupBox)
      vb.addWidget(self.embedCheckbox)     
      vb.addWidget(self.dirLabel)
      self.saveDir = QLineEdit("t.GDS", self.formGroupBox)
      vb.addWidget(self.saveDir)

      #Default config
      self.standardAlignRadio.toggle()
      self.scaleLineEdit.checkState = Qt.Checked
      self.transLineEdit.checkState = Qt.Checked
      self.embedCheckbox.checkState = Qt.Checked

      # creating a dialog button for ok and cancel 
      self.buttonBox = QDialogButtonBox(self)
      self.ok = self.buttonBox.addButton(QDialogButtonBox.Ok)
      self.cancel = self.buttonBox.addButton(QDialogButtonBox.Cancel)

      # Add button functionality
      self.cancel.clicked(lambda button: self.reject())
      self.ok.clicked(self.genBarcode)
      self.scaleLineEdit.clicked(self.upsize5x)
      
      #Make GUI update on input
      self.embedCheckbox.clicked(self.updateGUI)

      # creating a vertical layout 
      mainLayout = QVBoxLayout() 

      # adding form group box to the layout 
      mainLayout.addWidget(self.formGroupBox) 

      # adding button box to the layout 
      mainLayout.addWidget(self.buttonBox) 

      # setting lay out 
      self.setLayout(mainLayout) 
      self.updateGUI()
      
      #Build dialog objects 
      self.doneMsg = QErrorMessage(self)
      self.dialogObj = QMessageBox()
      self.dialogObj.setWindowTitle("Error")
      
      #Script variables
      self.barcode={' ':[1,5,1,1,1,1],
      '!':[1,4,1,2,1,1],
      '"':[1,4,1,1,1,2],
      '#':[1,3,1,3,1,1],
      '$':[1,3,1,2,1,2],
      '%':[1,3,1,1,1,3],
      '&amp;':[1,3,1,1,3,1],
      ',':[1,3,2,1,2,1],
      '(':[1,3,3,1,1,1],
      ')':[1,2,1,4,1,1],
      '*':[1,2,1,3,1,2],
      '+':[1,2,1,2,1,3],
      '\'':[1,2,1,2,3,1],
      '-':[1,2,1,1,1,4],
      '.':[1,2,1,1,3,2],
      '/':[1,2,2,2,2,1],
      '0':[1,2,2,1,2,2],
      '1':[1,2,3,2,1,1],
      '2':[1,2,3,1,1,2],
      '3':[1,1,1,5,1,1],
      '4':[1,1,1,4,1,2],
      '5':[1,1,1,3,1,3],
      '6':[1,1,1,3,3,1],
      '7':[1,1,1,2,1,4],
      '8':[1,1,1,2,3,2],
      '9':[1,1,1,1,1,5],
      ':':[1,1,1,1,3,3],
      ';':[1,1,1,1,5,1],
      '&lt;':[1,1,2,3,2,1],
      '=':[1,1,2,2,2,2],
      '&gt;':[1,1,2,1,2,3],
      '?':[1,1,2,1,4,1],
      '@':[1,1,3,3,1,1],
      'A':[1,1,3,2,1,2],
      'B':[1,1,3,1,1,3],
      'C':[1,1,3,1,3,1],
      'D':[1,1,4,1,2,1],
      'E':[1,1,5,1,1,1],
      'F':[2,3,1,1,2,1],
      'G':[2,3,2,1,1,1],
      'H':[2,2,1,2,2,1],
      'I':[2,2,1,1,2,2],
      'J':[2,2,2,2,1,1],
      'K':[2,2,2,1,1,2],
      'L':[2,1,1,3,2,1],
      'M':[2,1,1,2,2,2],
      'N':[2,1,1,1,2,3],
      'O':[2,1,1,1,4,1],
      'P':[2,1,2,3,1,1],
      'Q':[2,1,2,2,1,2],
      'R':[2,1,2,1,1,3],
      'S':[2,1,2,1,3,1],
      'T':[2,1,3,1,2,1],
      'U':[2,1,4,1,1,1],
      'V':[3,3,1,1,1,1],
      'W':[3,2,1,2,1,1],
      'X':[3,2,1,1,1,2],
      'Y':[3,1,1,3,1,1],
      'Z':[3,1,1,2,1,2],
      '[':[3,1,1,1,1,3],
      '\\':[3,1,1,1,3,1],
      ']':[3,1,2,1,2,1],
      '^':[3,1,3,1,1,1],
      '_':[3,1,3,1,1,1],
      'START':[4,1,2,1,1,1],
      'STOP':[5,1,1,1,1,1],
      'QUIET':[26.66666666666666666],
      'SYNC':[1,1,1,1,1,1]}

      self.numlist = list(enumerate(self.barcode))
      self.numlist = [(x+1,y) for x,y in self.numlist]
      self.numlist = dict(self.numlist)
      self.charlist = {v: k for k, v in self.numlist.items()}     

      #Position variables
      self.unitLength = 30*1000*5
      self.unitHeight=600*1000*5
      self.textScale = 250*5
      self.textOffset = -600*1000*5
      self.xtranslationOffset = 10000 * 1000*5
      self.xtranslationStandard = 8890*1000*5
      self.ytranslation = 11100 * 1000*5
      
  #Update GUI
  def updateGUI(self):
      embed = self.embedCheckbox.checkState
      
      if embed == Qt.Checked:
        self.saveDir.setEnabled(False)
      else:
        self.saveDir.setEnabled(True)

  #5x size enlargement
  def upsize5x(self):
      enlarge = self.scaleLineEdit.checkState
      if enlarge == Qt.Checked:
          self.unitLength = self.unitLength * 5
          self.unitHeight = self.unitHeight * 5
          self.textScale = self.textScale * 5
          self.textOffset = self.textOffset * 5
          self.xtranslationOffset = self.xtranslationOffset * 5
          self.xtranslationStandard = self.xtranslationStandard * 5
          self.ytranslation = self.ytranslation * 5
      else:
          self.unitLength = self.unitLength / 5
          self.unitHeight = self.unitHeight / 5
          self.textScale = self.textScale / 5
          self.textOffset = self.textOffset / 5
          self.xtranslationOffset = self.xtranslationOffset / 5
          self.xtranslationStandard = self.xtranslationStandard / 5
          self.ytranslation = self.ytranslation / 5
          
  #Get save file name
  def getSaveFile(self):
      return QFileDialog.getSaveFileName(self, "Save File Name")

  # get info method called when form is accepted 
  def genBarcode(self): 
      #Set up script variables
      name = self.nameLineEdit.text.upper()
      scale5x = self.scaleLineEdit.checkState
      positionOnMask = self.transLineEdit.checkState
      embed = self.embedCheckbox.checkState
      layerNumber = self.layerNum.text
      cellStr = self.cellName.text
      
      sAlign = self.standardAlignRadio.isChecked()
      xpos=0
      
      if sAlign:
        self.xtranslation = self.xtranslationStandard
      else:
        self.xtranslation = self.xtranslationOffset
      
      #Check cell name
      if cellStr == "":
        self.dialogObj.setText("Error:  Invalid cell name.  \nName must be at least 1 character.")
        self.dialogObj.open()
        return 0
      
      #Check layer number
      try:
        layerNumber = int(layerNumber)
      except:
        self.dialogObj.setText("Error:  Invalid layer number.  \nLayer must be a number.")
        self.dialogObj.open()
        return 0
      
      if layerNumber &lt; 0:
        self.dialogObj.setText("Error:  Invalid layer number.  \nLayer must be greater than or equal to 0.")
        self.dialogObj.open()
        return 0

      #First verify length
      if len(name) &lt; 1:
        self.dialogObj.setText("Error:  Name too short.  \nName must be at least 1 character.")
        self.dialogObj.open()
        return 0
      if len(name) &gt; 10:
        self.dialogObj.setText("Error:  Name too long.  \nShorten name to 10 charaters or less and try again.")
        self.dialogObj.open()
        return 0
      
      #Ensure there are no illegal characters
      name = name.upper()
      error = False
      chars = []
      for ch in name:
        try:
          self.barcode[ch]
        except:
          error = True
          chars.append(ch)
      
      if error:
        msg = "Error:  Unallowed characters encountered:"
        for char in chars:
          msg = msg + "\n\t" + char
        self.dialogObj.setText(msg + "\nRemove character and try again.")
        self.dialogObj.open()
        return 0
      
      #Print barcode
      xpos=0
      if embed == Qt.Checked:
        #self.printToLayout(name, layerNumber, cellStr)
        layout = pya.CellView.active().layout

        try:
          top = pya.CellView.active().layout().create_cell(cellStr)
        except:
          self.dialogObj.setText("Error:  no layout open.")
          self.dialogObj.open()
          return 0
          
        l1 = top.layout().layer(layerNumber, 0)
      else:
        #self.printToFile(name, layerNumber, cellStr)
        layout = pya.Layout()
        top = layout.create_cell(cellStr)
        l1 = layout.layer(layerNumber, 0)

      #Print barcode intro section
      xpos = self.printBlock(self.barcode['QUIET'], xpos, top, l1, True)
      xpos = self.printBlock(self.barcode['SYNC'], xpos, top, l1, False)
      xpos = self.printBlock(self.barcode['START'], xpos, top, l1, False)
          
      #Print name
      ssum=0
      name = name.upper()
      for ch in name:
        xpos = self.printBlock(self.barcode[ch], xpos, top, l1)
        ssum = ssum + self.charlist[ch]
      
      #Print checksum
      ssum = ((ssum-1) % 64) + 1
      xpos = self.printBlock(self.barcode[self.numlist[ssum]], xpos, top, l1)
      
      #Print termination section
      xpos = self.printBlock(self.barcode['STOP'], xpos, top, l1, False)
      xpos = self.printBlock(self.barcode['SYNC'], xpos, top, l1, True)
      xpos = self.printBlock(self.barcode['QUIET'], xpos, top, l1, True)
  
      #Print name below barcode
      txt_layer = pya.LayerInfo(layerNumber, 0)
      param  = { "layer": txt_layer, "text": name, "mag": self.textScale }
      
      if embed == Qt.Checked:
        txtcell = top.layout().create_cell("TEXT", "Basic", param)
      else:
        txtcell = layout.create_cell("TEXT", "Basic", param)
        
      movement = pya.Vector(5*xpos/12, self.textOffset)
      trans = pya.Trans(0, False, movement)
      top.insert(pya.CellInstArray.new(txtcell.cell_index(), trans))
      top.flatten(True)
        
      #Transform the overall image if necessary
      positionOnMask = self.transLineEdit.checkState
      if positionOnMask == Qt.Checked:
        #Mirror the barcode
        top.transform(pya.DTrans.M90)
        xtranslation = self.xtranslation + xpos
  
        #Move it to the proper location
        xtranslation = self.xtranslation - xpos
        mov = pya.Trans(0, False, self.xtranslation, self.ytranslation)
        top.transform(mov)
        
      #Write output file if necessary
      if embed == Qt.Unchecked:
        saveDir = self.saveDir.text
        try:
          layout.write(saveDir)
        except:
          self.dialogObj.setText("Error:  Could not write to file.  \nCheck to see if file is valid and try again.")
          self.dialogObj.open()
          return 0
            
      #Let the user know we're done
      self.doneMsg.showMessage("Done writing barcode")
          
  #Barcode block insertion function
  def printBlock(self, sequence, startPos, cell, layer, firstBlockBlack=False):
      black = firstBlockBlack
      for unit in sequence:
        l=unit*self.unitLength
        
        if black:
          cell.shapes(layer).insert(pya.Box(startPos, 0, startPos+l, self.unitHeight))
        
        black = not black
        startPos = startPos+l
      return startPos
      
  def printChecksum(self, name, xpos, cell, layer):
      #calc checksum
      ssum=0
      name = name.upper()
      for ch in name:
        ssum = ssum + self.charlist[ch]
      
      #Print checksum
      ssum = ((ssum-1) % 64) + 1
      print(ssum)
      print(layer)
      xpos = self.printBlock(self.barcode[self.numlist[ssum]], xpos, cell, layer)
      
GUI_Klayout = Dialog(pya.Application.instance().main_window())
GUI_Klayout.exec_()</text>
</klayout-macro>
